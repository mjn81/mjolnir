// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model File {
  id        String     @id @unique @default(cuid())
  name      String
  path      String
  mimeType  String
  size      Int
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  category  Category[]
  folder    Folder?    @relation(fields: [folderId], references: [id], onDelete: SetNull)
  folderId  String?
  dist      DistFile?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@map("file")
}

model Category {
  id        String      @id @unique @default(cuid())
  name      String
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  files     File[]
  distToken DistToken[]

  @@map("category")
}

model User {
  id         String      @id @unique @default(cuid())
  fullName   String
  userName   String
  email      String      @unique
  password   String
  role       Role        @default(CLIENT)
  usage      Usage?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  files      File[]
  categories Category[]
  folders    Folder[]
  distTokens DistToken[]
  distFiles  DistFile[]
  distRoute  DistRoute?

  @@map("user")
}

model Folder {
  id        String   @id @unique @default(cuid())
  name      String?
  parentId  String?
  parent    Folder?  @relation("parents", fields: [parentId], references: [id], onDelete: Cascade)
  folders   Folder[] @relation("parents")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  files     File[]

  @@map("folder")
}

model Usage {
  id        String   @id @unique @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @unique
  used      BigInt   @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  limit     BigInt   @default(500000000) // 500MB in bytes

  @@map("usage")
}

model DistToken {
  id         String    @id @unique @default(cuid())
  token      String    @unique
  category   Category? @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId String?
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@map("dist_token")
}

model DistRoute {
  id        String   @id @unique @default(cuid())
  route     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @unique

  @@map("dist_route")
}

model DistFile {
  id        String   @id @unique @default(cuid())
  file      File     @relation(fields: [fileId], references: [id], onDelete: Cascade)
  fileId    String   @unique
  access    Access   @default(PRIVATE)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("public_file")
}

enum Role {
  ADMIN
  CLIENT
}

enum Access {
  PUBLIC
  PRIVATE
}
